name: DIGITClusterworkflow
on:
  push:
    branches:
      - UPYOG-Bootcamp
  # workflow_dispatch:
  #   inputs:
  #     terraform_operation:
  #       description: "Terraform operation: plan, apply, destroy"
  #       required: true
  #       default: "plan"
  #       type: choice
  #       options:
  #         - plan
  #         - apply
  #         - destroy    

jobs:
  create_infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project
        run: echo "Build started"
      - name: Displaying the input parameters provided
        run: cat input.yaml
        working-directory: infra-as-code/terraform/sample-aws
      - name: Change working directory
        run: echo "This command is run in the current directory"
        working-directory: infra-as-code/terraform/sample-aws/remote-state
      - name: Displaying DB Password and key in egov-demo-secrets.yaml
        run: cat egov-demo-secrets.yaml
        working-directory: config-as-code/environments
      - name: Updating different files based on parameters provided in input.yaml
        run: go run init.go
        working-directory: infra-as-code/terraform/scripts
      - name: Terraform Init - remotestate
        id: init
        run: terraform init
        working-directory: infra-as-code/terraform/sample-aws/remote-state
        env:
          TF_IN_AUTOMATION: "true"
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}
      - name: Terraform Validate - remotestate
        id: validate
        run: terraform validate -no-color
        working-directory: infra-as-code/terraform/sample-aws/remote-state
        env:
          TF_IN_AUTOMATION: "true"
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}
      - name: Terraform Plan - remotestate
        id: plan
        #if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        #if: "${{ github.event.inputs.terraform_operation == 'plan' }}"
        #continue-on-error: true  
        working-directory: infra-as-code/terraform/sample-aws/remote-state
        env:
          TF_IN_AUTOMATION: "true"
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}
      - name: Terraform Apply - remotestate
        id: apply
        #if: github.event_name == 'pull_request'
        run: terraform apply -no-color -input=false -auto-approve
        #if: "${{ github.event.inputs.terraform_operation == 'apply' }}"
        continue-on-error: true  
        working-directory: infra-as-code/terraform/sample-aws/remote-state
        env:
          TF_IN_AUTOMATION: "true"
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}

      - name: Running the input script
        run: go run init.go
        working-directory: infra-as-code/terraform/scripts 
        env:
          TF_IN_AUTOMATION: "true"
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}

      - name: Terraform init - Infra creation
        id: init-Infra
        run: terraform init
        working-directory: infra-as-code/terraform/sample-aws
        env:
          TF_IN_AUTOMATION: "true"
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}

      - name: Terraform Validate - Infra creation
        id: validate-Infra
        run: terraform validate -no-color
        working-directory: infra-as-code/terraform/sample-aws
        env:
          TF_IN_AUTOMATION: "true"
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}

      - name: Terraform Plan - Infra creation
        id: plan-Infra
        #if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        #if: "${{ github.event.inputs.terraform_operation == 'plan' }}"
        #continue-on-error: true  
        working-directory: infra-as-code/terraform/sample-aws
        env:
          TF_IN_AUTOMATION: "true"
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}

      - name: Terraform Apply - Infra creation
        id: apply-Infra
        #if: github.event_name == 'pull_request'
        run: terraform apply -no-color -input=false -auto-approve
        #if: "${{ github.event.inputs.terraform_operation == 'apply' }}"
        continue-on-error: true  
        working-directory: infra-as-code/terraform/sample-aws
        env:
          TF_IN_AUTOMATION: "true"
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}
